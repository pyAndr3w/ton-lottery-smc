int slice_data_equal?(slice s1, slice s2) asm "SDEQ";

() send_money(slice addr, int amount, cell body, int mode) impure {
  var message = begin_cell()
    .store_uint(0, 1)
    .store_uint(1, 1)
    .store_uint(0, 4)
    .store_slice(addr)
    .store_grams(amount)
    .store_uint(0, 107);
  ifnot (null?(body)) {
    message = message.store_slice(body.begin_parse());
  } else {
    message = message.store_uint(0, 32);
  }
  send_raw_message(message.end_cell(), null?(mode) ? 3 : mode); ;; ignore errors
}

(int, int) encode_number_to_text(int number) {
  int len = 0;
  int value = 0;
  int mult = 1;
  do {
    (number, int res) = number.divmod(10);
    value = value + (res + 48) * mult;
    mult = mult * 256;
    len = len + 1;
  } until (number == 0);
  return (len, value);
}

builder store_number(builder msg, int number, int divisor) { ;; divisor is 0 (for int) or N for 10**N for print float numbers
  if (divisor) {
    (int ceil, int res) = divmod(number, divisor); 
    (int cl, int cv) = encode_number_to_text(ceil);
    msg = msg.store_uint(cv, cl * 8 );
    msg = msg.store_uint(46, 8); ;; "."
    (int rl, int rv) =  encode_number_to_text(res);
    repeat( 9 - rl ) {
      msg = msg.store_uint(48, 8); ;; "0"
    }
    return msg.store_uint(rv, rl * 8);
  } else {
    (int cl, int cv) = encode_number_to_text(number);
    return msg.store_uint(cv, cl * 8 );
  }
}
